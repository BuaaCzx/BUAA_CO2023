.data
array: .space 4096
endl: .asciiz "\n"

.macro readInt(%ad)
	li $v0, 5
	syscall
	move %ad, $v0
.end_macro

.macro printInt(%ad)
	li $v0, 1
	move $a0, %ad
	syscall
.end_macro

.macro getIndex(%res, %i)
	move %res, %i
	sll %res, %res, 2
.end_macro

.macro printStr(%ad)
	la $a0, %ad
	li $v0, 4
	syscall
.end_macro

.text
readInt($s0) # $s0 = m
li $t0, 0
read_loop:
beq $t0, $s0, read_loop_end
	readInt($t1)
	getIndex($t2, $t0)
	sw $t1, array($t2) # array[i] = read()
addi $t0, $t0, 1
j read_loop
read_loop_end:

readInt($s1) # $s1 = n
li $t0, 0
solve_loop:
beq $t0, $s1, solve_loop_end

	readInt($a0) # $a0 = x
	li $t1, 0
	move $t2, $s0 # $t2 = m
	search_loop:
	beq $t1, $t2, search_loop_end
		add $t3, $t1, $t2
		div $t3, $t3, 2 # $t3 = mid
		getIndex($t4, $t3)
		lw $t4, array($t4) # $t4 = array[mid]
		bge $t4, $a0, else
			addi $t1, $t3, 1
			j end_if
		else:
			move $t2, $t3
		end_if:
	j search_loop
	search_loop_end:
	
	getIndex($t3, $t1)
	lw $t3, array($t3) # $t3 = array[l]
	bne $t3, $a0, else2
		beq $t3, $s0, else2
			li $t9, 1
			printInt($t9)
			printStr(endl)
			j end_if2
	else2:
		printInt($zero)
		printStr(endl)
		j end_if2
	end_if2:
	
addi $t0, $t0, 1
j solve_loop
solve_loop_end: