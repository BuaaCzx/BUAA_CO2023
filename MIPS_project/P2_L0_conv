# int matrix1[16][16], matrix2[16][16];
.data
matrix1: .space 1024
matrix2: .space 1024
endl: .asciiz "\n"
space: .asciiz " "

.macro readInt(%ad)
	li $v0, 5
	syscall
	move %ad, $v0
.end_macro

.macro printInt(%ad)
	li $v0, 1
	move $a0, %ad
	syscall
.end_macro

.macro printStr(%ad)
	li $v0, 4
	la $a0, %ad
	syscall
.end_macro

.macro getIndex(%res, %i, %j) # res = (i * 16 + j) * 4
	sll %res, %i, 4
	add %res, %res, %j
	sll %res, %res, 2
.end_macro

.text

# cin >> m1 >> n1 >> m2 >> n2;

readInt($s0) # $s0 = m1
readInt($s1) # $s1 = n1
readInt($s2) # $s2 = m2
readInt($s3) # $s3 = n2

li $t0, 0
read_loop1:
beq $t0, $s0, read_loop1_end
	li $t1, 0
	read_loop2:
	beq $t1, $s1, read_loop2_end
		readInt($t2)
		getIndex($t3, $t0, $t1)
		sw $t2, matrix1($t3)
	addi $t1, $t1, 1
	j read_loop2
	read_loop2_end:
addi $t0, $t0, 1
j read_loop1
read_loop1_end:

li $t0, 0
read_loop3:
beq $t0, $s2, read_loop3_end
	li $t1, 0
	read_loop4:
	beq $t1, $s3, read_loop4_end
		readInt($t2)
		getIndex($t3, $t0, $t1)
		sw $t2, matrix2($t3)
	addi $t1, $t1, 1
	j read_loop4
	read_loop4_end:
addi $t0, $t0, 1
j read_loop3
read_loop3_end:

sub $s4, $s0, $s2 
addi $s4, $s4, 1 # $s4 = m3
sub $s5, $s1, $s3
addi $s5, $s5, 1 # $s5 = n3

# for (int i = 0; i < m3; i++) {
#        for (int j = 0; j < n3; j++) {
#            int res = 0;
#            for (int k = 0; k < m2; k++) {
#                for (int l = 0; l < n2; l++) {
#                    res += matrix1[i + k][j + l] * matrix2[k][l];
#                }
#            }
#            cout << res << " ";
#        }
#        cout << endl;
#    }
li $t0, 0 # $t0 = i
solve_loop1:
beq $t0, $s4, solve_loop1_end
	li $t1, 0 # $t1 = j
	solve_loop2:
	beq $t1, $s5, solve_loop2_end
		li $s6, 0 # res = 0
		li $t2, 0 # $t2 = k
		solve_loop3:
		beq $t2, $s2, solve_loop3_end
			li $t3, 0 # $t3 = l
			solve_loop4:
			beq $t3, $s3, solve_loop4_end
				add $t4, $t0, $t2 # $t4 = i + k
				add $t5, $t1, $t3 # $t5 = j + l
				getIndex($t4, $t4, $t5)
				lw $t4, matrix1($t4) # $t4 = matrix1[i + k][j + l]
				getIndex($t5, $t2, $t3)
				lw $t5, matrix2($t5) # $t5 = matrix2[k][l]
				mul $t4, $t4, $t5 # $t4 = matrix1[i + k][j + l] * matrix2[k][l]
				add $s6, $s6, $t4
			addi $t3, $t3, 1
			j solve_loop4
			solve_loop4_end:
		addi $t2, $t2, 1
		j solve_loop3
		solve_loop3_end:
		printInt($s6)
		printStr(space)
	addi $t1, $t1, 1
	j solve_loop2
	solve_loop2_end:
	printStr(endl)
addi $t0, $t0, 1
j solve_loop1
solve_loop1_end: